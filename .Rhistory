rmspe2 <- rmspe(yhat2-yt)
rmspe3 <- rmspe(yhat3-yt)
rmspe4 <- rmspe(yhat4-yt)
rmspec <- rmspe(yhatc-yt)
cat("maxInt = 1 ", rmspe1,
"\nmaxInt = 2 ", rmspe2,
"\nmaxInt = 3 ", rmspe3,
"\nmaxInt = 4 ", rmspe4,
"\nmaxInt = Inf ", rmspec,
)
cat("maxInt = 1 ", rmspe1,
"\nmaxInt = 2 ", rmspe2,
"\nmaxInt = 3 ", rmspe3,
"\nmaxInt = 4 ", rmspe4,
"\nmaxInt = Inf ", rmspec
)
source("R/setup.R", echo=FALSE)
set.seed(10943)
f3 <- function(x){
x[1]^2 + x[1]*x[2]*x[3] + x[2]^3/9
}
n <- 500
p <- 10
X <- matrix(runif(n*p), ncol=p)
y <- apply(X, 1, f3)
# Fit models
mod1 <- bass(X, y, maxInt=1)
mod2 <- bass(X, y, maxInt=2)
mod3 <- bass(X, y, maxInt=3)
mod4 <- bass(X, y, maxInt=4)
modc <- bass(X, y, birth.type="coinflip")
# Test models
nt <- 1000
Xt <- matrix(runif(nt*p), ncol=p)
yt <- apply(Xt, 1, f3)
yhat1 <- apply(predict(mod1, Xt), 2, mean)
yhat2 <- apply(predict(mod2, Xt), 2, mean)
yhat3 <- apply(predict(mod3, Xt), 2, mean)
yhat4 <- apply(predict(mod4, Xt), 2, mean)
yhatc <- apply(predict(modc, Xt), 2, mean)
rmspe <- function(d) sqrt(mean(d^2))
rmspe1 <- rmspe(yhat1-yt)
rmspe2 <- rmspe(yhat2-yt)
rmspe3 <- rmspe(yhat3-yt)
rmspe4 <- rmspe(yhat4-yt)
rmspec <- rmspe(yhatc-yt)
cat("maxInt = 1 ", rmspe1,
"\nmaxInt = 2 ", rmspe2,
"\nmaxInt = 3 ", rmspe3,
"\nmaxInt = 4 ", rmspe4,
"\nmaxInt = Inf ", rmspec
)
tab <- c(rmspe1,
rmspe2,
rmspe3,
rmspe4,
rmspec,)
tab <- c(rmspe1,
rmspe2,
rmspe3,
rmspe4,
rmspec)
colnames(tab) <- c("maxInt = 1", "maxInt = 2", "maxInt = 3", "maxInt = 4", "coinflip")
tab <- matrix(c(rmspe1,
rmspe2,
rmspe3,
rmspe4,
rmspec), nrow=1)
colnames(tab) <- c("maxInt = 1", "maxInt = 2", "maxInt = 3", "maxInt = 4", "coinflip")
tab
stargazer(tab, type="text")
?stargazer
stargazer(tab)
stargazer(tab, type="text")
?C_mc
C0 <- C_mc(f3)
# Get C_true (with MC)
measure <- function() runif(p)
C0 <- C_mc(f3)
C0 <- C_mc(f3. measure)
C0 <- C_mc(f3, measure)
C0
C0 <- C_mc(f3, measure, nmc=1e6)
C0
# Estimate C
C1 <- C_bass(mod1)
C2 <- C_bass(mod2)
C3 <- C_bass(mod3)
C4 <- C_bass(mod4)
Cc <- C_bass(modc)
# Estimate C
C1 <- C_bass(mod1)
rmspe(C0 - C2)
rmspe(C0 - C3)
rmspe(C0 - C4)
rmspe(C0 - Cc)
stargazer(tab)
rmspe(C0 - Cc), nrow=1)
tab2 <- matrix(c(rmspe(C0 - C2),
rmspe(C0 - C3),
rmspe(C0 - C4),
rmspe(C0 - Cc)), nrow=1)
cbind(tab, tab2)
rbind(tab, tab2)
tab
tab2
tab2 <- matrix(0, c(rmspe(C0 - C2),
rmspe(C0 - C3),
rmspe(C0 - C4),
rmspe(C0 - Cc)), nrow=1)
rbind(tab, tab2)
cbind(tab, tab2)
tab
tab2
tab2 <- matrix(c(0, rmspe(C0 - C2),
rmspe(C0 - C3),
rmspe(C0 - C4),
rmspe(C0 - Cc)), nrow=1)
cbind(tab, tab2)
rbind(tab, tab2)
sttargazer(rbind(tab, tab2))
stargazer(rbind(tab, tab2))
cite("activegp")
citation("activegp")
library(BASS)
## big real-data problem
load("https://github.com/finnlindgren/heatoncomparison/tree/master/Data/SatelliteTemps.Rdata")
?load
## big real-data problem
url <- url("https://github.com/finnlindgren/heatoncomparison/tree/master/Data/SatelliteTemps.Rdata")
load(url)
Sys.setenv('http_proxy'='http://proxyout.lanl.gov:8080')
Sys.setenv('https_proxy'='http://proxyout.lanl.gov:8080')
load(url)
install.packages("glober")
library(glober)
install.packages('glober')
install.packages("igraph")
library("igraph")
install.packages("glober")
library(glober)
library("RCurl")
install.packages("glober")
library(glober)
?install.packages
install.packages("glober", libs_only=TRUE)
library(igraph)
library(RCurl)
?RCurl::AUTH_ANY
install.packages("glober")
library(glober)
?glober::f_2D
?glober::glober
?glober::glober.2d
glober::glober.2d
quack()
library(duqling)
library(BASS)
quack()
quack(input_dims=2)
y <- apply(X, 1, duqling::dms_complicated)
X <- lhs::maximinLHS(500, 2)
y <- apply(X, 1, duqling::dms_complicated)
mod1 <- bass(X, y)
mod2 <- glober.2d(X, y)
Xt <- lhs::randomLHS(1000, 2)
yt <- apply(Xt, 1, duqling::dms_complicated)
mod2 <- glober.2d(X, y, Xt)
30^2
mod2 <- glober.2d(X, y, xpred=seq(0,1,length.out=30))
data('xpred_2D')
dim(xpred_2D)
dim(Xt)
mod2 <- glober.2d(X, y, xpred=Xt)
dim(X)
length(y)
mod2 <- glober.2d(x=X, y=y, xpred=Xt)
data('x_2D')
data('y_2D')
dim(x_2D)
length(y_2d)
y_2D
dim(y_2D)
mod2 <- glober.2d(X, matrix(y, ncol=1), xpred=Xt)
X <- lhs::maximinLHS(50, 2)
y <- apply(X, 1, duqling::dms_complicated)
Xt <- lhs::randomLHS(1000, 2)
yt <- apply(Xt, 1, duqling::dms_complicated)
mod1 <- bass(X, y)
mod2 <- glober.2d(X, matrix(y, ncol=1), xpred=Xt)
glober.2d(x_2D, y_2D, xpred_2D)
library(Matrix)
glober.2d(x_2D, y_2D, xpred_2D)
glober.2d(x = x_2D, y = y_2D, xpred = xpred_2D, ord = 3, parallel = FALSE)
mod2 <- glober.2d(X, matrix(y, ncol=1), xpred=Xt)
bandSparse
?bandSparse
glober.2d
x = X
y = y
xpred = Xt
ord = 3
parallel = FALSE
nb.cores = 1
d <- 2
transformation <- transformation.magnitude(y)
glober:::transformation.magnitude
transformation <- glober:::transformation.magnitude(y)
transformation$fact
transformation$ytrans - y
transformation <- glober:::transformation.magnitude(y)
y <- transformation$ytrans
fact = transformation$fact
ord <- ord - 1
list_x <- list(sort(unique(x[, 1])), sort(unique(x[, 2])))
list_xpred <- list(sort(unique(xpred[, 1])), sort(unique(xpred[,
2])))
x_min <- matrix(apply(rbind(x, xpred), 2, min), ncol = 2)
x_max <- matrix(apply(rbind(x, xpred), 2, max), ncol = 2)
genlasso.res.1 <- genlasso.fun.2d(list_x, y, x_min, x_max,
2, ord, x, parallel = parallel, nb.Cores = nb.Cores)
genlasso.res.1 <- glober:::genlasso.fun.2d(list_x, y, x_min, x_max,
2, ord, x, parallel = parallel, nb.Cores = nb.Cores)
genlasso.res.2 <- glober:::genlasso.fun.2d(list_x, y, x_min, x_max,
1, ord, x, parallel = parallel, nb.Cores = nb.Cores)
y <- matrix(y, ncol=1)
genlasso.res.1 <- glober:::genlasso.fun.2d(list_x, y, x_min, x_max,
2, ord, x, parallel = parallel, nb.Cores = nb.Cores)
genlasso.res.2 <- glober:::genlasso.fun.2d(list_x, y, x_min, x_max,
1, ord, x, parallel = parallel, nb.Cores = nb.Cores)
list_x
x_min
x_max
glober:::genlasso.fun.2d
xfixed <- list_x[[dim_i]]
dim_i = 2
xfixed <- list_x[[dim_i]]
lambdaList = list()
indices_not_null = c()
bigListeOfKnots = lapply(1:length(xfixed), function(i) NULL)
knotSelec <- list()
idi = 1
nbtemp = length(xfixed)
for (x_i in xfixed) {
y_i <- yfun[x[, dim_i] == x_i, ]
xchanging <- sort(unique(x[x[, dim_i] == x_i, -dim_i]))
OutFun <- genlasso.fun.1d(xchanging, y_i, x_min[dim_i],
x_max[dim_i], ord, parallel = parallel, nb.Cores = nb.Cores)
bigListeOfKnots[[idi]] <- OutFun[[1]]
lambda <- OutFun[[2]]
lambdaList[[idi]] <- lambda
if (length(lambda) > 1)
indices_not_null <- c(indices_not_null, idi)
idi = idi + 1
}
yfun = y
yfun
class(yfun)
for (x_i in xfixed) {
y_i <- yfun[x[, dim_i] == x_i, ]
xchanging <- sort(unique(x[x[, dim_i] == x_i, -dim_i]))
OutFun <- genlasso.fun.1d(xchanging, y_i, x_min[dim_i],
x_max[dim_i], ord, parallel = parallel, nb.Cores = nb.Cores)
bigListeOfKnots[[idi]] <- OutFun[[1]]
lambda <- OutFun[[2]]
lambdaList[[idi]] <- lambda
if (length(lambda) > 1)
indices_not_null <- c(indices_not_null, idi)
idi = idi + 1
}
OutFun <- glober:::genlasso.fun.1d(xchanging, y_i, x_min[dim_i],
x_max[dim_i], ord, parallel = parallel, nb.Cores = nb.Cores)
xchanging
y_i
x_min[dim_i]
x_max[dim_i]
glober:::genlasso.fun.1d
xchanging
x = xchanging
y = y_i
dim_i
x_min = x_min[2]
x_max = x_max[2]
ord
D <- D.weight(x, ord = (ord + 1))
D <- glober:::D.weight(x, ord = (ord + 1))
glober:::D.weight
ord = ord + 1
D = diag(length(x))
D
ord
i = 1
x[i:length(x)]
length(x)
?glober.1d
data('x_1D')
# --- Loading values of the corresponding y --- #
data('y_1D')
# --- Loading values of xpred --- #
data('xpred_1D')
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
x_1D
y_1D
xpred_1D
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 2, parallel = FALSE)
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 1, parallel = FALSE)
?`dgCMatrix-class`
library(glober)
library(glober)
X <- lhs::maximinLHS(50, 2)
y <- apply(X, 1, duqling::dms_complicated)
Xt <- lhs::randomLHS(1000, 2)
yt <- apply(Xt, 1, duqling::dms_complicated)
?glober
?glober.1d
data('x_1D')
# --- Loading values of the corresponding y --- #
data('y_1D')
# --- Loading values of xpred --- #
data('xpred_1D')
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
?glober
detach("package:glober", unload = TRUE)
remove.packages("glober", lib="~/Library/R/4.0/library")
install.packages("glober")
library(glober)
library(glober)
?glober.1d
data('x_1D')
# --- Loading values of the corresponding y --- #
data('y_1D')
# --- Loading values of xpred --- #
data('xpred_1D')
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
remove.packages("glober", lib="~/Library/R/4.0/library")
install.packages("glober")
library(glober)
X <- lhs::maximinLHS(50, 2)
y <- apply(X, 1, duqling::dms_complicated)
Xt <- lhs::randomLHS(1000, 2)
yt <- apply(Xt, 1, duqling::dms_complicated)
mod2 <- glober.2d(X, matrix(y, ncol=1), xpred=Xt)
dms_complicated
?glober::glober.2d
# --- Loading values of x --- #
data('x_2D')
# --- Loading values of the corresponding y --- #
data('y_2D')
# --- Loading values of xpred --- #
data('xpred_2D')
# --- Estimation of f at xpred --- #
glober.2d(x = x_2D, y = y_2D, xpred = xpred_2D, ord = 3, parallel = FALSE)
remove.packages("glober", lib="~/Library/R/4.0/library")
install.packages("glober")
library(glober)
?glober.1d
data('x_1D')
# --- Loading values of the corresponding y --- #
data('y_1D')
# --- Loading values of xpred --- #
data('xpred_1D')
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
library(Matrix)
data('x_1D')
# --- Loading values of the corresponding y --- #
data('y_1D')
# --- Loading values of xpred --- #
data('xpred_1D')
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
Version()
Version
version
library(installr)
install.packages("installr")
library(installr)
updateR()
?updateR
?update.packages()
update.packages()
update.packages(ask=FALSE)
library(glober)
install.packages("glober")
library(glober)
?glober.1d
data('x_1D')
# --- Loading values of the corresponding y --- #
data('y_1D')
# --- Loading values of xpred --- #
data('xpred_1D')
# --- Estimation of f at xpred --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = FALSE)
# --- Parallel computing --- #
glober.1d(x = x_1D, y = y_1D, xpred = xpred_1D, ord = 3, parallel = TRUE, nb.Cores = 2)
?glober.2d
data('x_2D')
# --- Loading values of the corresponding y --- #
data('y_2D')
# --- Loading values of xpred --- #
data('xpred_2D')
# --- Estimation of f at xpred --- #
glober.2d(x = x_2D, y = y_2D, xpred = xpred_2D, ord = 3, parallel = FALSE)
X <- lhs::maximinLHS(50, 2)
library(duqling)
library(lhs)
install.packages("lhs")
library(duqling)
install.packages("BASS")
?bass
library(BASS)
?bass
library(glober)
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
devtools::install_github("knrumsey/GBASS")
devtools::install_github("knrumsey/concordance")
devtools::install_github("knrumsey/quack")
library(quack)
install.packages("MHadaptive")
install_url("https://cran.r-project.org/src/contrib/Archive/MHadaptive/MHadaptive_1.1-8.tar.gz")
install_github("knrumsey/quack")
library(quack)
library(duqling)
library(glober)
library(BASS)
X <- lhs::maximinLHS(50, 2)
y <- apply(X, 1, duqling::dms_complicated)
Xt <- lhs::randomLHS(1000, 2)
yt <- apply(Xt, 1, duqling::dms_complicated)
mod1 <- bass(X, y)
mod2 <- glober.2d(X, matrix(y, ncol=1), xpred=Xt)
library(glober)
?glober.2d
data('x_2D')
# --- Loading values of the corresponding y --- #
data('y_2D')
# --- Loading values of xpred --- #
data('xpred_2D')
# --- Estimation of f at xpred --- #
glober.2d(x = x_2D, y = y_2D, xpred = xpred_2D, ord = 3, parallel = FALSE)
x_2D
dim(x_2D)
dim(y_2D)
dim(xpred_2D)
dim(X)
dim(y)
y <- matrix(y, ncol=1)
dim(y)
dim(X)
dim(Xt)
mod2 <- glober.2d(X, y, xpred=Xt)
dim(x_2D)
plot(x_2D)
y <- apply(x_2D, 1, duqling::dms_complicated)
y <- matrix(y, ncol=1)
plot(xpred_2D)
data("x_2D")
y <- apply(x_2D, 1, duqling::dms_complicated)
y
y <- matrix(y, ncol=1)
Xt <- lhs::randomLHS(1000, 2)
yt <- apply(Xt, 1, duqling::dms_complicated)
mod2 <- glober.2d(X, y, xpred=Xt)
mod2 <- glober.2d(x_2D, y, xpred=Xt)
data("xpred_2D")
data("x_2D")
y <- apply(x_2D, 1, duqling::dms_complicated)
y <- matrix(y, ncol=1)
data("xpred_2D")
yt <- apply(Xt, 1, duqling::dms_complicated)
mod2 <- glober.2d(x_2D, y, xpred=Xt)
mod2 <- glober.2d(x_2D, y, xpred=xpred_2D)
mod2$festimated
plot(yt, mod2$festimated)
yt <- apply(xpred_2D, 1, duqling::dms_complicated)
plot(yt, mod2$festimated)
?glober
mod1 <- bass(x_2D, y)
yhat1 <- predict(mod1, xpred_2D)
yhat1
yhat1 <- apply(yhat1, 2, mean)
plot(yt, yhat1)
plot(x_2D)
dim(x_2D)
X <- lhs::maximinLHS(100, 2)
X <- lhs::maximinLHS(100, 2)
y <- apply(X, 1, duqling::dms_complicated)
X <- lhs::maximinLHS(100, 2)
y <- apply(X, 1, duqling::dms_complicated)
mod3 <- bass(X, y)
yhat3 <- apply(predict(mod3, xpred_2D), 2, mean)
plot(yt, yhat3)
source("R/setup.R", echo=FALSE)
# Constrained prior, uniform over [0,1]^2 * 1(x_1 > x_2)
C2_true <- matrix(c(19/6,  247/180,
247/180, 161/270), nrow=2, byrow=TRUE)
# Simulate data and train BASS model
X <- maximinLHS(500, 2)
Y <- apply(X, 1, f)
mod <- bass(X, Y)
C_bass(mod)
